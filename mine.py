import os
from telegram import Bot, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask
import threading
import asyncio

# –ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render:
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")  # –ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890

bot = Bot(token=BOT_TOKEN)
app = Flask(__name__)

# === –ö–æ–º–∞–Ω–¥–∞ /post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ===
async def post_to_channel(update, context):
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text="üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ!")
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo="https://example.com/image.jpg", caption="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∏–∂–µ üëá")
        await context.bot.send_message(chat_id=CHANNEL_ID, text="üîó https://example.com")
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Render —á–µ—Ä–µ–∑ Flask ===
@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def run_bot():
    app_builder = ApplicationBuilder().token(BOT_TOKEN).build()
    app_builder.add_handler(CommandHandler("post", post_to_channel))
    await app_builder.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    asyncio.run(run_bot())
